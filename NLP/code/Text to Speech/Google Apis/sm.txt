CSC 317 Simulation and Modeling: Quick Tour On Key Terms, Definition & Concepts 
Abstract:
This article provides a detailed overview of over 50 fundamental cryptography terms and concepts. It explores various topics and sub-topics related to Simulation and Modeling. This comprehensive overview serves as a valuable reference for understanding key terms, concepts, and topics simply and concisely.
1. Introduction
Simulation is the process of imitating a real-world system over time to analyze its behavior and predict performance. A simulation model represents the system through assumptions expressed in mathematical, logical, or symbolic relationships between system components. A set of assumptions about a system's operation, expressed through mathematical or logical relationships.What-If Scenarios? Simulation helps answer questions about potential changes to a system without physically altering it. It is used to predict the performance of new systems before implementation.
1: Simulation
1.1 System and System Environment:
A system is a set of interacting components working towards a common goal.
The system environment includes external factors influencing the system.
Example: A hospital system with departments, patients, and staff interacting within the healthcare environment.

1.2 Components of a System:
Key parts include input, output, processing units, feedback, and control mechanisms.
Example: In a factory system, raw materials (input) are processed to create products (output).

1.3 Discrete and Continuous Systems:
Discrete systems change at specific events or times (e.g., bank transactions).
Continuous systems change continuously over time (e.g., temperature changes).
Example: Simulating daily customer arrivals (discrete) vs. temperature variations throughout the day (continuous).

1.4 System Simulation:
The process of creating a computer-based model to imitate the behavior of a real-world system.
Example: Simulating flight control systems for pilot training.

1.4 Model of a System:
A model is a simplified representation of a system, often using equations or algorithms.
Example: A mathematical model of population growth.

1.5 Types of Models:
Physical Models: Real-life scaled-down representations (e.g., a toy car).
Mathematical Models: Use equations to represent systems (e.g., economic models).
Simulation Models: Computer-based representations of systems (e.g., traffic simulations).

1.6 Use of Differential and Partial Differential Equations in Modeling:
Differential equations model continuous systems, such as population growth or fluid flow.
Example: Modeling temperature distribution over time using partial differential equations.

1.6.1 Advantages, Disadvantages, and Limitations of Simulation:
Advantages: Safe testing of scenarios, cost-effective, and flexible.
Disadvantages: Time-consuming and computationally intensive.
Limitations: Simplifications can lead to inaccuracies.
Example: Simulating a disaster response plan to minimize risk.

1.6.2 Application Areas:
Simulation is widely used in healthcare, manufacturing, defense, finance, and education.
Example: Simulating supply chain logistics to optimize delivery times.

1.6.3 Phases in Simulation Study:
Problem Formulation: Identify the problem to be simulated.
Model Building: Create a model that represents the system.
Data Collection: Gather data for the model.
Model Translation: Convert the model into a computer-readable format.
Verification and Validation: Ensure the model works and represents reality.
Experimentation: Run simulations and analyze results.
Documentation: Record findings and insights.
Example: Developing and testing a transportation simulation for city planning.

2: Simulation of Continuous and Discrete Systems
2.1 Continuous System Models
Represent systems where changes occur continuously over time.
Example: Water level in a tank changing over time.

2.2 Analog Computers
Computers that simulate continuous systems using physical components like voltage, current, or mechanical movements.
Example: Early flight simulators that used electrical circuits to model flight dynamics including thermometers, and speedometers.

2.3 Analog Methods
Methods using continuous physical phenomena (e.g., electrical currents) to model real-world processes.
Example: Using hydraulic systems to represent fluid flow in pipes, and wind tunnels to simulate aerodynamics.

2.4 Hybrid Simulation
Combines continuous and discrete event simulations to model systems with both continuous and event-driven behavior.
Example: Modeling a chemical plant where chemical reactions are continuous, but machine breakdowns occur as discrete events.

2.5 Digital-Analog Simulators
Simulators that use both digital and analog techniques to model complex systems.
Example: Flight simulators that use digital computation for navigation and analog systems for real-time feedback.

2.6 Feedback Systems
Systems where outputs are fed back into the input to control behavior.
Example: A thermostat controls a heating system by adjusting based on temperature feedback.

2.7 Discrete Event Simulation
Models systems where events occur at distinct points in time.
Example: Customer arrivals at a bank, where each arrival is a separate event.

2.8 Representation of Time
Time in discrete event simulations is represented by event occurrences, not continuous time flow. Some Models use time events where the clock updates with discrete intervals like seconds, milliseconds, and hours.
Example: Time jumps to the next customer arrival event in a bank simulation.

2.9 Simulation Clock and Time Management
The clock in a simulation keeps track of time as events occur.
Example: In a factory simulation, the clock jumps from one machine operation to the next.

2.10 Models of Arrival Processes
Poisson Processes: Events occur randomly but with a constant average rate.
Example: Phone calls arriving at a call center.
Non-stationary Poisson Processes: The rate of event occurrence varies over time.
Example: Traffic flow fluctuates throughout the day.
Batch Arrivals: Multiple events occur at the same time.
Example: A bus arrives with many passengers at once.

2.11 Gathering Statistics
Collecting data from simulations to measure system performance.
Example: Recording average wait time in a queue simulation.

2.12 Probability and Monte Carlo Simulation
Monte Carlo simulation uses random sampling to estimate system behavior based on probability.
Example: Estimating the value of an investment portfolio by simulating thousands of possible market scenarios, predicting the value of pi.

3: Queuing Systems 
3.1 Characteristics and Structure of Basic Queuing System
Definition: A queuing system consists of entities (customers) arriving to receive service from one or more servers.
Key Characteristics:
Arrival Process: Describes how entities arrive (e.g., randomly or periodically).
Service Mechanism: Describes how entities are served (e.g., one at a time or in batches).
Queue Discipline: Rules determining the order of service (e.g., first-come, first-served).
Capacity: Maximum number of entities that can wait in line.

3.2 Models of Queuing System
M/M/1: Single server with Poisson arrivals and exponential service times.
M/M/c: Multiple servers with Poisson arrivals and exponential service times.
M/G/1: Single server with Poisson arrivals and a general service time distribution.
G/G/1: General arrival and service processes with a single server.

3.3 Queuing Notation
Notation Structure: Commonly represented as A/S/c/K/N/D, where:
A: Arrival process (e.g., M for Markovian, D for Deterministic).
S: Service time distribution.
c: Number of servers.
K: Capacity of the queue.
N: Population size (if finite).
D: Queue discipline (e.g., FCFS for First-Come, First-Served).

3.4 Single Server and Multiple Server Queueing Systems
Single Server System: One server provides service to all customers.
Example: A bank teller serving customers one at a time.
Multiple Server System: Multiple servers serve customers simultaneously.
Example: Several checkout lanes at a grocery store.

3.5 Measurement of Queuing System Performance
Performance Metrics:
Average Queue Length: Average number of entities in the queue.
Average Wait Time: Average time an entity spends waiting for service.
Utilization Factor: Proportion of time the server is busy.
Service Level: Percentage of customers served within a specified time.

3.6 Elementary Idea About Networks of Queuing with Particular Emphasis on Computer Systems
Networks of queues are systems where multiple queues are interconnected. In computer systems, examples include:
Client-server systems: Clients send requests to a server, which processes them and sends responses.
Computer networks: Data packets travel through a network of nodes, potentially waiting in queues at routers and switches.
Manufacturing systems: Workpieces move through a series of workstations, each with its queue.

3.7 Applications of Queuing Systems
Queuing theory is used in various fields, including:
Telecommunications: Modeling phone systems, data networks, and call centers.
Manufacturing: Analyzing production lines and inventory systems.
Computer systems: Evaluating performance of servers, networks, and operating systems.
Healthcare: Modeling patient flow in hospitals and clinics.
Transportation: Analyzing traffic flow and airport operations.

4. Markov Chain
A Markov chain is a stochastic model used to describe a sequence of events in which the probability of each event depends only on the state attained in the previous event. This property is known as the Markov property or memorylessness, meaning that the future state of the process is independent of past states. Markov chains are widely used in various fields, including mathematics, computer science, finance, and biology, to model random processes.
4.1 Key Components
States: The various conditions or configurations in which the system can exist. Each possible state represents a unique scenario of the system.
Transition Probabilities: The probabilities of moving from one state to another. These probabilities are usually summarized in a transition matrix, where each element represents the likelihood of transitioning from one state to another.
Initial State: The state from which the Markov chain starts. The analysis can vary based on different initial states.
Stationary Distribution: A distribution of probabilities over the states that remains unchanged as time progresses. It represents the long-term behavior of the Markov chain.

4.2 Types of Markov Chains
Discrete-Time Markov Chains: The process evolves in discrete time steps. The transition probabilities are defined for each pair of states.
Continuous-Time Markov Chains: The process can change states at any time, with transition rates rather than probabilities.

Example
Weather Modeling: A classic example of a Markov chain is predicting weather patterns. Assume we define the states as "Sunny," "Cloudy," and "Rainy." The transition probabilities could be as follows:
If today is "Sunny," there's a 70% chance it will be sunny tomorrow and a 30% chance it will be cloudy.
If today is "Cloudy," there's a 50% chance it will remain cloudy and a 50% chance it will rain tomorrow.

This model allows for the prediction of future weather conditions based solely on the current day's weather.
4.3 Applications
Finance: Markov chains are utilized in modeling stock prices and market trends, where the future price depends on current conditions.
Queueing Theory: They help analyze systems where entities queue for service, such as customer service centers, allowing businesses to optimize service efficiency.
Genetics: Markov models can describe gene frequencies and evolutionary changes in populations over generations.
Game Theory: In strategic decision-making, Markov chains can model players' actions based on current game states.

5. Random Numbers
5.1 Random Numbers and Their Properties
Random numbers are values generated in such a way that each number is produced without a specific pattern, ensuring a level of unpredictability. Key properties include:
Uniformity: Random numbers should be evenly distributed over the defined range, meaning every number has an equal chance of being selected.
Independence: Each random number should be generated independently of others, so the selection of one number does not affect the others.
Reproducibility: In some applications, it may be essential to reproduce sequences of random numbers for testing purposes.

5.2 Pseudo-Random Numbers
Pseudo-random numbers are generated using deterministic algorithms that produce sequences that only appear random. Unlike true random numbers, they are generated from an initial value known as the seed. Key points include:
Deterministic Nature: Given the same seed, the algorithm will produce the same sequence of numbers every time.
Common Algorithms: Examples include Linear Congruential Generators (LCGs) and Mersenne Twister.
Use Cases: Pseudo-random numbers are widely used in simulations, cryptography, and statistical sampling due to their efficiency and ease of generation.

5.3 Methods of Generation of Random Numbers
Several methods can be employed to generate random numbers, including:
Physical Processes: Utilizing unpredictable physical phenomena, like radioactive decay or electronic noise, to generate true random numbers.
Algorithmic Methods: Using algorithms (e.g., LCG, Mersenne Twister) to produce pseudo-random numbers through mathematical computations.
Hybrid Methods: Combining true random sources with algorithms to enhance randomness and reduce predictability.

5.4 Tests for Randomness - Uniformity and Independence
Testing the quality of random number generators is crucial to ensure that they meet the required properties. Common tests include:
Uniformity Tests: Check if the numbers are uniformly distributed across the range. The Chi-squared test is often used for this purpose.
Independence Tests: Assess whether the numbers are independent of each other. Tests like the runs test or autocorrelation tests are applied to examine correlations between consecutive numbers.
Frequency Test: Analyze the frequency of occurrences of each number to ensure they are distributed evenly.

5.5 Random Variate Generation
Random variate generation involves generating random numbers that follow a specific probability distribution (e.g., uniform, normal, exponential). Key methods include:
Inverse Transform Sampling: Uses the inverse of the cumulative distribution function (CDF) to generate samples from a given distribution.
Rejection Sampling: Generates candidate samples from a proposal distribution and accepts or rejects them based on a defined criterion to obtain samples from the target distribution.
Box-Muller Transform: A method for generating pairs of independent standard normally distributed random numbers from uniformly distributed random numbers.

6. Verification and Validation
6.1 Design of Simulation Models
The design of simulation models involves creating a representation of a real-world system to analyze its behavior under various conditions. Key aspects include:
Defining Objectives: Clearly outline the goals of the simulation, such as performance analysis, process optimization, or system design evaluation.
Identifying Components: Determining the essential elements of the system, including entities, resources, events, and the relationships between them.
Developing Assumptions: Establishing assumptions that simplify the model while retaining its core characteristics, allowing for meaningful analysis.
Selecting Appropriate Techniques: Choosing simulation methods (e.g., discrete-event simulation, continuous simulation) based on the nature of the system being modeled.

6.2 Verification of Simulation Models
Structural Accuracy: Ensure that the model accurately represents the system's structure and components.
Logical Consistency: Check for inconsistencies or errors in the model's logic.
Coding Accuracy: Verify that the simulation code is free of errors and implements the model correctly.
Data Validation: Ensure that the input data is accurate and consistent with the model's requirements.

6.3 Calibration and Validation of the Models
Calibration: Adjust the model's parameters to match observed system behavior.
Validation: Compare the model's output to real-world data to assess its accuracy.

6.4 Three-Step Approach for Validation of Simulation Models
Face Validity: Assess if the model appears reasonable to experts in the field.
Empirical Validity: Compare the model's output to real-world data.
Predictive Validity: Evaluate the model's ability to predict future system behavior.

6.5 Accreditation of Models
Standards: Adhere to relevant standards and guidelines (e.g., IEEE, ANSI).
Documentation: Provide comprehensive documentation of the model, including its purpose, assumptions, and validation process.
Peer Review: Have the model reviewed by experts in the field.
Certification: Obtain certification from a recognized body, if applicable.

7. Analysis of Simulation Output
7.1 Confidence Intervals and Hypothesis Testing
Confidence Intervals: Determine a range of values within which the true population parameter is likely to lie.
Hypothesis Testing: Evaluate whether a hypothesis about a population parameter is supported by the sample data.

7.2 Estimation Methods
Point Estimates: Single values that estimate population parameters (e.g., mean, variance).
Interval Estimates: Ranges of values that estimate population parameters with a specified level of confidence.

7.3 Simulation Run Statistics
Mean The average value of a statistic across multiple simulation runs.
Variance: The spread of the values around the mean.
Standard Deviation: The square root of the variance.
Standard Error: The standard deviation of the sample mean.

7.4 Replication of Runs
Multiple Runs: Conduct multiple simulation runs to reduce the impact of random variation.
Independent Runs: Ensure that each run is independent of the others.

7.6 Elimination of Initial Bias
Definition: The period at the beginning of a simulation where results may not accurately represent the steady-state behavior of the system being modeled.
Example: In a call center simulation, the first hour might show unusually short wait times because the system starts with no calls in queue.

7.6.1 Steady State
Definition: The condition of a system or process in which variables have reached a state of equilibrium and do not change significantly over time.
Example: In a manufacturing simulation, steady state is reached when the production rate stabilizes and remains consistent over time.

7.6.2 Warm-up Period
Definition: The initial phase of a simulation run during which data is collected but not used for analysis, allowing the system to reach steady state.
Example: In a retail store simulation, the first week might be designated as the warm-up period to allow inventory levels and customer patterns to stabilize.

7.6.3 Truncation
Definition: The practice of removing initial data points from a simulation to eliminate the effects of initial bias.
Example: In a traffic flow simulation, the first 30 minutes of data might be discarded to focus on steady-state traffic patterns.

7.6.4 Intelligent Initialization
Definition: Starting a simulation with conditions that closely match the typical state of the real system.
Example: Initializing a bank simulation with the average number of customers typically present at opening time, rather than starting with an empty bank.

7.6.5 Replication
Definition: Running multiple instances of a simulation with different initial conditions to minimize the impact of any single set of starting values.
Example: Running a weather prediction model 100 times with slightly different initial conditions to generate a range of possible outcomes.

8: Simulation of Computer Systems
8.1 Simulation Tools
8.1.1 Discrete Event Simulation (DES)
Definition: A method of simulating the behavior and performance of a real-world process or system over time.
Concept: Models the system as a series of discrete events that occur at specific points in time.
Example: Simulating packet flow in a computer network, where events might include packet arrival, processing, and departure.

8.1.2 Monte Carlo Simulation
Definition: A technique that uses random sampling to obtain numerical results and solve problems that might be deterministic in principle.
Concept: Relies on repeated random sampling to compute results, often used for risk analysis and optimization.
Example: Simulating the reliability of a computer system by running thousands of scenarios with randomly generated component failure times.

8.1.3 Agent-Based Simulation
Definition: A method of modeling systems composed of autonomous, interacting agents.
Concept: Focuses on individual components (agents) and their behaviors, allowing complex system-level behaviors to emerge.
Example: Simulating user behavior on a computer network, where each user is an agent with its own set of behaviors and decision-making processes.

8.2 Simulation Languages: GPSS
8.2.1 GPSS (General Purpose Simulation System)
Definition: A special-purpose programming language for simulating discrete-time event-based models.
Concept: Uses a block diagram approach to model system flow and resource usage.
Example: Modeling a multi-user computer system, where GPSS blocks represent processes like "SEIZE CPU", "ADVANCE processing_time", and "RELEASE CPU".

8.2.2 Transaction
Definition: In GPSS, a transaction represents an entity flowing through the system.
Concept: Transactions are the dynamic elements in a GPSS simulation, moving from block to block.
Example: In a computer system simulation, a transaction might represent a job or a data packet.

8.2.3 Facility
Definition: A resource in GPSS that can be used by only one transaction at a time.
Concept: Represents single-server resources in the system being modeled.
Example: A single CPU in a computer system simulation would be modeled as a facility.

8.3 Case Studies and Sample Mathematical Models
8.3.1 Queuing Model
Definition: A mathematical model used to analyze waiting lines or queues.
Concept: Describes the arrival process, service process, and queue behavior of a system.
Example: M/M/1 queue model for a single-server system, where M/M indicates Markovian (exponential) arrival and service times, and 1 indicates a single server.

8.3.2 Markov Chain Model
Definition: A stochastic model describing a sequence of possible events where the probability of each event depends only on the state of the previous event.
Concept: Used to model systems with state transitions, where future states depend only on the current state.
Example: Modeling the state of a computer system (idle, busy, overloaded) over time, where the probability of transitioning to each state depends only on the current state.

9. Conclusion
By providing clear definitions and simplifying fundamental concepts, it empowers both technical and non-technical individuals to engage with the principles of Simulations and Modeling effectively. A basic solid theoretical foundation in these areas not only facilitates better comprehension but also enhances practical application in real-world scenarios. 
As technology continues to advance, we can expect simulation and modeling to play an even more critical role in shaping our future. From predicting climate change to designing autonomous vehicles, using AI, simulations offer valuable insights and support informed decision-making. The possible trends future trends can be the Integration of AI and ML in big data, Cloud-based simulation, and Real-time simulation.
10. References:
Jerry Banks, John S. Carson, Barry L. Nelson, David M. Nicole, "Discrete Event System Simulation", 5th Edition, Pearson Education

Read More Articles on Dilli Hang Rai | LinkedIn
More About me: dilli822.github.io
Feedback & Review: dillihagrai.078@godawari.edu.np, dillihangrae@gmail.com